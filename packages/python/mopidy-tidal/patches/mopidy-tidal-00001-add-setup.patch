diff -ruN mopidy_tidal-0.3.4/setup.py mopidy_tidal-0.3.4.new/setup.py
--- mopidy_tidal-0.3.4/setup.py	1970-01-01 02:00:00.000000000 +0200
+++ mopidy_tidal-0.3.4.new/setup.py	2023-09-16 11:53:41.333595802 +0300
@@ -0,0 +1,35 @@
+# -*- coding: utf-8 -*-
+from setuptools import setup
+
+packages = \
+['mopidy_tidal']
+
+package_data = \
+{'': ['*']}
+
+install_requires = \
+['Mopidy>=3.0,<4.0', 'tidalapi>=0.7.3,<0.8.0']
+
+entry_points = \
+{'mopidy.ext': ['tidal = mopidy_tidal:Extension']}
+
+setup_kwargs = {
+    'name': 'mopidy-tidal',
+    'version': '0.3.4',
+    'description': 'Mopidy Extension for Tidal music service integration.',
+    'long_description': "# Mopidy-Tidal\n\n[![Latest PyPI version](https://img.shields.io/pypi/v/Mopidy-Tidal.svg?style=flat)](https://github.com/tehkillerbee/mopidy-tidal)\n[![Number of PyPI downloads](https://img.shields.io/pypi/dm/Mopidy-Tidal.svg?style=flat)](https://github.com/tehkillerbee/mopidy-tidal)\n[![codecov](https://codecov.io/gh/tehkillerbee/mopidy-tidal/branch/master/graph/badge.svg?token=cTJDQ646wy)](https://codecov.io/gh/tehkillerbee/mopidy-tidal)\n\nMopidy Extension for Tidal music service integration.\n\n### Changelog\nFind the latest changelog [here](CHANGELOG.md)\n\n### Contributions\n- Current maintainer: [tehkillerbee](https://github.com/tehkillerbee)\n- Original author: [mones88](https://github.com/mones88)\n- [Contributors](https://github.com/tehkillerbee/mopidy-tidal/graphs/contributors)\n\nQuestions related to Mopidy-Tidal, feature suggestions, bug reports and Pull Requests are very welcome.\n\nIf you are experiencing playback issues unrelated to this plugin, please report this to the Mopidy-Tidal issue tracker and/or check [Python-Tidal/Tidalapi repository](https://github.com/tamland/python-tidal) for relevant issues.\n\n### Development guidelines\nPlease refer to [this document](DEVELOPMENT.md) to get you started.\n\n## Getting started\nFirst install and configure Mopidy as per the instructions listed [here](https://docs.mopidy.com/en/latest/installation/). It is encouraged to install Mopidy as a systemd service, as per the instructions listed [here](https://docs.mopidy.com/en/latest/running/service/). \n\nAfter installing Mopidy, you can now proceed installing the plugins that you require, including Mopidy-Tidal. :\n```\nsudo pip3 install Mopidy-Tidal\n```\n\nPoetry can also be used to install mopidy-tidal and its dependencies.\n```\ncd <mopidy-tidal source root>\npoetry install\n```\n\n##### Note: Make sure to install the Mopidy-Tidal plugin in the same python venv used by your Mopidy installation. Otherwise, the plugin will NOT be detected.\n\n### Install from latest sources\nIn case you are upgrading your Mopidy-Tidal installation from the latest git sources, make sure to do a force upgrade from the source root (remove both mopidy-tidal and python-tidal), followed by a (service) restart.\n```\ncd <mopidy-tidal source root>\nsudo pip3 uninstall mopidy-tidal\nsudo pip3 uninstall tidalapi\nsudo pip3 install .\nsudo systemctl restart mopidy\n```\n\n## Dependencies\n### Python\n\nReleased versions of Mopidy-Tidal have the same requirement as the Mopidy\nversion they depend on.  Development code may depend on unreleased features.\nAt the time of writing we require python >= 3.9 in anticipation of mopidy 3.5.0.\n\n### Python-Tidal\nMopidy-Tidal requires the Python-Tidal API (tidalapi) to function. This is usually installed automatically when installing Mopidy-Tidal.\nIn some cases, Python-Tidal stops working due to Tidal changing their API keys.\n\nWhen this happens, it will usually be necessary to upgrade the Python-Tidal API plugin manually\n```\nsudo pip3 install --upgrade tidalapi\n```\n\nAfter upgrading Python-Tidal/tidalapi, it will often be necessary to delete the existing json file and restart mopidy.\nThe file is usually stored in `/var/lib/mopidy/tidal/tidal-oauth.json`, depending on your system configuration.\n\n### GStreamer\nWhen using High and Low quality, be sure to install gstreamer bad-plugins, e.g.:\n```\nsudo apt-get install gstreamer1.0-plugins-bad\n```\nThis is mandatory to be able to play m4a streams.\n\n## Plugin Configuration\n\nBefore starting Mopidy, you must add configuration for Mopidy-Tidal to your Mopidy configuration file, if it is not already present.\n\nRun `sudo mopidyctl config` to see the current effective config used by Mopidy\n\nThe configuration is usually stored in `/etc/mopidy/mopidy.conf`, depending on your system configuration. Add the configuration listed below in the respective configuration file:\n```\n[tidal]\nenabled = true\nquality = LOSSLESS\n#client_id =\n#client_secret =\n#playlist_cache_refresh_secs = 0\n#lazy = false\n```\n\nRestart the Mopidy service after adding the Tidal configuration\n```\nsudo systemctl restart mopidy\n```\n\n### Plugin configuration\nThe plugin configuration is usually set in your mopidy configuration:\n```\n[tidal]\nenabled = true\nquality = LOSSLESS\n#playlist_cache_refresh_secs = 0\nlazy = true\nlogin_method = HACK\n#client_id =\n#client_secret =\n```\n* **quality:** Set to either HI_RES_LOSSLESS, LOSSLESS, HIGH or LOW. Make sure to use a quality level supported by your current subscription\n\n    * Note: `HI_RES_LOSSLESS` quality  (i.e. Max quality) requires a Tidal HiFi Plus subscription, while `LOSSLESS` quality (i.e. HiFi lossless) requires a HiFi subscription.\n\n* **playlist_cache_refresh_secs (Optional):** Tells if (and how often) playlist\ncontent should be refreshed upon lookup.\n  * `0` (default): The default value (`0`) means that playlists won't be refreshed after the\n  extension has started, unless they are explicitly modified from mopidy.\n  * `>0`: A non-zero value expresses for how long (in seconds) a cached playlist is\n  considered valid. For example, a value of `300` means that the cached snapshot\n  of a playlist will be used if a new `lookup` occurs within 5 minutes from the\n  previous one, but the playlist will be re-loaded via API if a lookup request\n  occurs later.\n\n  The preferred setting for this value is a trade-off between UI responsiveness\nand responsiveness to changes. If you perform a lot of playlist changes from\nother clients and you want your playlists to be instantly updated on mopidy,\nthen you may choose a low value for this setting, albeit this will result in\nlonger waits when you look up a playlist, since it will be fetched from\nupstream most of the times. If instead you don't perform many playlist\nmodifications, then you may choose a value for this setting within the range of\nhours - or days, or even leave it to zero so playlists will only be refreshed\nwhen mopidy restarts. This means that it will take longer for external changes\nto be reflected in the loaded playlists, but the UI will be more responsive\nwhen playlists are looked up. A value of zero makes the behaviour of\n`mopidy-tidal` quite akin to the current behaviour of `mopidy-spotify`.\n\n* **lazy (Optional):**: Whether to connect lazily, i.e. when required, rather than\nat startup.\n  * `false` (default): Lazy mode is off by default for backwards compatibility and to make the first login easier (since mopidy will not block in lazy mode until you try to access Tidal).\n  * `true`: Mopidy-Tidal will only try to connect when something\n  tries to access a resource provided by Tidal.  \n  \n  Since failed connections due to\n  network errors do not overwrite cached credentials (see below) and Mopidy\n  handles exceptions in plugins gracefully, lazy mode allows Mopidy to continue to\n  run even with intermittent or non-existent network access (although you will\n  obviously be unable to play any streamed music if you cannot access the\n  network).  When the network comes back Mopidy will be able to play tidal content\n  again.  This may be desirable on mobile internet connections, or when a server\n  is used with multiple backends and a failure with Tidal should not prevent\n  other services from running.\n* **login_method (Optional):**: This setting configures the OAuth login process. \n  * `BLOCK` (block): The user is REQUIRED to complete the OAuth login flow, otherwise mopidy will hang.\n  * `HACK`: Mopidy will start as usual but the user will be prompted to complete the OAuth login flow. The link is provided through a dummy track (i.e. HACK)\n* **client_id, _secret (Optional):**: Tidal API `client_id`, `client_secret` can be overridden by the user if necessary.\n\n### OAuth Flow\nThe first time you use the plugin, you will have to use the OAuth flow to login.:\n\n1. After restarting the Mopidy server, check the latest systemd logs and find a line like:\n```\njournalctl -u mopidy | tail -10\n...\nVisit link.tidal.com/AAAAA to log in, the code will expire in 300 seconds.\n```\n2. Visit the link to connect the mopidy tidal plugin to your Tidal account.\n\nThe OAuth session will be reloaded automatically when Mopidy is restarted. It\nwill be necessary to perform these steps again if/when the session expires or if\nthe json file is moved/deleted.\n\n##### Note: Login process is a **blocking** action, so Mopidy + Web interface will stop loading until you approve the application.\n\nIf for some reason loading cached credentials fails, `mopidy-tidal` will restart\nthe oauth flow (potentially blocking mopidy).  If connection failed for a\nnetwork error and this new connection also fails, your cached credentials will\nnot be overwritten.  There is, however, a potential race condition where the\nnetwork comes back online after a failed connection and `mopidy-tidal`\nunnecessarily requests new credentials.  This bug has never been reported in the\nwild and is only mildly annoying, whereas any logic to detect it (for instance\nby inspecting the specific failure from `python-tidal`) would probably be more\nfragile.",
+    'author': 'Johannes Linde',
+    'author_email': 'tehkillerbee@users.noreply.github.com',
+    'maintainer': 'None',
+    'maintainer_email': 'None',
+    'url': 'https://github.com/tehkillerbee/mopidy-tidal',
+    'packages': packages,
+    'package_data': package_data,
+    'install_requires': install_requires,
+    'entry_points': entry_points,
+    'python_requires': '>=3.9,<4.0',
+}
+
+
+setup(**setup_kwargs)
+
